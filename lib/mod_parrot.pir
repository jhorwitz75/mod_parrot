# this file should be autogenerated

# Copyright (c) 2004, 2005, 2008 Jeff Horwitz
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

.namespace [ 'ModParrot' ]

.include 'iglobals.pasm'

# use when NCI can dlfunc from the current image
.sub modparrot_init
    .local pmc func
    .local pmc lib

    null $S0
    $P0 = get_hll_global ['_modparrot'], '__module_path'
    if null $P0 goto do_loadlib
    $S0 = $P0
  do_loadlib:
    loadlib lib, $S0

    # loadlib here instead of as a pragma in case we set the dynext path
    loadlib $P0, 'modparrot_group.so'

    .include "build/src/pir/request_rec_dlfunc.pir"
    .include "build/src/pir/server_rec_dlfunc.pir"

    dlfunc func, lib, "mpnci_null", "p"
    set_root_global [ 'ModParrot'; 'NCI' ], "null", func

    dlfunc func, lib, "mpnci_backtrace", "tJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "backtrace", func

    dlfunc func, lib, "mpnci_request_rec", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec", func

    dlfunc func, lib, "mpnci_request_rec_main", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_main", func

    dlfunc func, lib, "mpnci_request_rec_next", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_next", func

    dlfunc func, lib, "mpnci_request_rec_prev", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_prev", func

    dlfunc func, lib, "mpnci_request_rec_user", "tJpti"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_user", func

    dlfunc func, lib, "mpnci_request_rec_notes", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_notes", func

    dlfunc func, lib, "mpnci_request_rec_get_basic_auth_pw", "iJpP"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_get_basic_auth_pw", func

    dlfunc func, lib, "mpnci_request_rec_per_dir_config", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_per_dir_config", func

    dlfunc func, lib, "mpnci_request_rec_headers_in", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_headers_in", func

    dlfunc func, lib, "mpnci_request_rec_headers_out", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_headers_out", func

    dlfunc func, lib, "mpnci_request_rec_err_headers_out", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_err_headers_out", func

    dlfunc func, lib, "mpnci_request_rec_pool", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_pool", func

    dlfunc func, lib, "mpnci_request_rec_server", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_rec_server", func

    dlfunc func, lib, "mpnci_rwrite", "iJPip"
    set_root_global [ 'ModParrot'; 'NCI' ], "rwrite", func

    dlfunc func, lib, "mpnci_ap_log_rerror", "vJtiiipt"
    set_root_global [ 'ModParrot'; 'NCI' ], "ap_log_rerror", func

    dlfunc func, lib, "mpnci_conf_pool", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "conf_pool", func

    dlfunc func, lib, "mpnci_temp_pool", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "temp_pool", func

    dlfunc func, lib, "mpnci_log_pool", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "log_pool", func

    dlfunc func, lib, "mpnci_child_pool", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "child_pool", func

    dlfunc func, lib, "mpnci_server_rec", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "server_rec", func

    dlfunc func, lib, "mpnci_conn_rec", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "conn_rec", func

    dlfunc func, lib, "mpnci_csd", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "csd", func

    dlfunc func, lib, "mpnci_ctx_pool_name", "tJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "ctx_pool_name", func

    dlfunc func, lib, "mpnci_raw_srv_config", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "raw_srv_config", func

    dlfunc func, lib, "mpnci_raw_dir_config", "pJ"
    set_root_global [ 'ModParrot'; 'NCI' ], "raw_dir_config", func

    dlfunc func, lib, "mpnci_request_read", "iJPip"
    set_root_global [ 'ModParrot'; 'NCI' ], "request_read", func

    dlfunc func, lib, "mpnci_register_pool_cleanup", "vJpPP"
    set_root_global [ 'ModParrot'; 'NCI' ], "register_pool_cleanup", func

    dlfunc func, lib, "mpnci_add_apache_module", "pJttPP"
    set_root_global [ 'ModParrot'; 'NCI' ], "add_apache_module", func

    dlfunc func, lib, "mpnci_get_module_config", "PJtpi"
    set_root_global [ 'ModParrot'; 'NCI' ], "get_module_config", func

    dlfunc func, lib, "mpnci_cmd_parms_server", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "cmd_parms_server", func

    dlfunc func, lib, "mpnci_cmd_parms_pool", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "cmd_parms_pool", func

    dlfunc func, lib, "mpnci_cmd_parms_temp_poolserver", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "cmd_parms_temp_poolserver", func

    dlfunc func, lib, "mpnci_cmd_parms_cmd", "pJp"
    set_root_global [ 'ModParrot'; 'NCI' ], "cmd_parms_cmd", func

    dlfunc func, lib, "mpnci_set_config_ctx_pool", "vJpt"
    set_root_global [ 'ModParrot'; 'NCI' ], "set_config_ctx_pool", func

    # load required libraries
    load_bytecode 'P6object.pbc'
    load_bytecode 'ModParrot/Constants.pbc'
    load_bytecode 'ModParrot/Interpreter.pbc'
    load_bytecode 'ModParrot/Context.pbc'
    load_bytecode 'ModParrot/Apache/Constants.pbc'
    load_bytecode 'ModParrot/Apache/Module.pbc'
    load_bytecode 'ModParrot/Apache/RequestRec.pbc'
    load_bytecode 'ModParrot/Apache/ServerRec.pbc'
    load_bytecode 'ModParrot/Apache/CmdParms.pbc'
    load_bytecode 'ModParrot/APR/Pool.pbc'
    load_bytecode 'ModParrot/APR/Table.pbc'

    # global to indicate that we're actually running
    $P0 = new 'Integer'
    $P0 = 1
    set_root_global '!MODPARROT_RUNTIME', $P0
.end

.sub modparrot_set_include_path
    .param string pathstring
    .local string path
    .local pmc pathlist
    .local pmc interp
    .local pmc lib_paths
    .local pmc include_paths
    .local int count

    getinterp interp
    lib_paths = interp[.IGLOBALS_LIB_PATHS]

    # XXX replace magic constant -- see parrot's t/compilers/imcc/syn/file.t
    include_paths = lib_paths[0]

    pathlist = split ':', pathstring
    count = elements pathlist
    $I0 = count

  path_loop:
    dec $I0
    path = pathlist[$I0]
    unshift include_paths, path
    if $I0 > 0 goto path_loop

    .return(count)
.end

.sub modparrot_set_lib_path
    .param string pathstring
    .local string path
    .local pmc pathlist
    .local pmc interp
    .local pmc lib_paths
    .local pmc include_paths
    .local int count

    getinterp interp
    lib_paths = interp[.IGLOBALS_LIB_PATHS]

    # XXX replace magic constant -- see parrot's t/compilers/imcc/syn/file.t
    include_paths = lib_paths[1]

    pathlist = split ':', pathstring
    count = elements pathlist
    $I0 = count

  path_loop:
    dec $I0
    path = pathlist[$I0]
    unshift include_paths, path
    if $I0 > 0 goto path_loop

    .return(count)
.end

.sub modparrot_set_dynext_path
    .param string pathstring
    .local string path
    .local pmc pathlist
    .local pmc interp
    .local pmc lib_paths
    .local pmc include_paths
    .local int count

    getinterp interp
    lib_paths = interp[.IGLOBALS_LIB_PATHS]

    # XXX replace magic constant -- see parrot's t/compilers/imcc/syn/file.t
    include_paths = lib_paths[2]

    pathlist = split ':', pathstring
    count = elements pathlist
    $I0 = count

  path_loop:
    dec $I0
    path = pathlist[$I0]
    unshift include_paths, path
    if $I0 > 0 goto path_loop

    .return(count)
.end
