/* $Id $ */

/* Copyright (c) 2008 Jeff Horwitz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*

=head1 NAME

src/pmc/modparrothandle.pmc - ModParrotHandle PMC

=head1 DESCRIPTION

=head2 Vtable Functions

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "../src/io/io_private.h"
#include "mod_parrot.h"
#include "httpd.h"
#include "http_protocol.h"

#define MODPARROTHANDLE_READ_SIZE 1024

pmclass ModParrotHandle dynpmc need_ext group modparrot_group {
    ATTR INTVAL  flags;               /* Filehandle flags             */
    ATTR STRING *mode;                /* The mode string used in open */
    ATTR STRING *encoding;            /* The encoding for read/write  */
    ATTR STRING *filename;            /* A mock path and filename     */
    ATTR INTVAL  read_offset;         /* Position, for reading bytes  */
    ATTR PMC    *r;                   /* RequestRec object */

/*

=item C<void init()>

Initializes a newly created ModParrotHandle object.

=cut

*/

    VTABLE void init() {
        Parrot_ModParrotHandle_attributes *data_struct =
                mem_allocate_typed(Parrot_ModParrotHandle_attributes);

        PMC_data(SELF)            = data_struct;
        data_struct->flags        = 0;
        data_struct->mode         = NULL;
        data_struct->encoding     = NULL;
        data_struct->filename     = NULL;
        data_struct->r            = NULL;
        data_struct->read_offset  = 0;

        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);
    }

/*

=item C<PMC *clone()>

Create a copy of the handle.

=cut

*/

    VTABLE PMC *clone() {
        Parrot_ModParrotHandle_attributes * const old_struct  = PARROT_MODPARROTHANDLE(SELF);
        PMC * const copy = pmc_new(INTERP, SELF->vtable->base_type);
        Parrot_ModParrotHandle_attributes * const data_struct = PARROT_MODPARROTHANDLE(copy);

        data_struct->flags        = old_struct->flags;
        data_struct->mode         = Parrot_str_copy(INTERP, old_struct->mode);
        data_struct->encoding     = Parrot_str_copy(INTERP,
                                        old_struct->encoding);
        data_struct->r            = old_struct->r;

        return copy;
    }

/*

=item C<void mark()>

Mark active modparrothandle data as live.

=cut

*/

    VTABLE void mark() {
        Parrot_ModParrotHandle_attributes * const data_struct = PARROT_MODPARROTHANDLE(SELF);
        if (data_struct->r)
            Parrot_gc_mark_PObj_alive(interp, (PObj *)data_struct->r);
        if (data_struct->mode)
            Parrot_gc_mark_PObj_alive(interp, (PObj *)data_struct->mode);
        if (data_struct->encoding)
            Parrot_gc_mark_PObj_alive(interp, (PObj *)data_struct->encoding);
        if (data_struct->filename)
            Parrot_gc_mark_PObj_alive(interp, (PObj *)data_struct->filename);
    }

/*

=item C<void destroy()>

Free structures.

=cut

*/
    VTABLE void destroy() {
        if (PARROT_MODPARROTHANDLE(SELF)) {
            mem_sys_free(PARROT_MODPARROTHANDLE(SELF));
            PMC_data(SELF) = NULL;
        }
    }

/*

=item C<INTVAL get_bool()>

XXX FIXME! -- always true for now
Returns whether the handle has reached the end of the file.

=cut

*/

    VTABLE INTVAL get_bool() {
        return 0;
    }


/*

=back

=head2 Methods

=over 4

=item C<METHOD open(PMC *r, STRING *mode :optional)>

Opens a mod_parrot handle using the supplied request_rec with the given mode.

=cut

*/

    METHOD open(PMC *r, STRING *mode :optional, INTVAL got_mode :opt_flag) {
        STRING *open_mode, *attrname;
        INTVAL flags;
        PMC *attrpmc;

        if (PMC_IS_NULL(r)) {
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,
                "Missing RequestRec in ModParrotHandle open");
        }
        SET_ATTR_r(INTERP, SELF, r);

        if (got_mode && !STRING_IS_NULL(mode))
            SET_ATTR_mode(INTERP, SELF, Parrot_str_copy(INTERP, mode));

        /* Set a default mode of read-write. */
        GET_ATTR_mode(INTERP, SELF, open_mode);
        if (STRING_IS_NULL(open_mode)) {
            open_mode = Parrot_str_new_constant(INTERP, "r");
            SET_ATTR_mode(INTERP, SELF, open_mode);
        }

        flags = Parrot_io_parse_open_flags(interp, open_mode);
        SET_ATTR_flags(INTERP, SELF, flags);

        RETURN(PMC *SELF);
    }

/*

=item C<METHOD is_tty()>

ModParrotHandles are never tty's, returns false.

=cut

*/
    METHOD is_tty() {
        RETURN(INTVAL 0);
    }

/*

=item C<METHOD close()>

Resets the request_rec and other core data.

=cut

*/

    METHOD close() {
        SET_ATTR_r(INTERP, SELF, NULL);
        SET_ATTR_read_offset(INTERP, SELF, 0);
        RETURN(INTVAL 0);
    }

/*

=item C<METHOD is_closed()>

Check if the handle is open.

=cut

*/

    METHOD is_closed() {
        request_rec *rr = NULL;
        STRING *attrname = Parrot_str_new_constant(INTERP, "r");
        PMC *attrpmc;
        PMC *r;

        GET_ATTR_r(INTERP, SELF, r);
        if (r) {
            attrname = Parrot_str_new_constant(INTERP, "r");
            attrpmc = VTABLE_get_attr_str(INTERP, r, attrname);
            rr = (request_rec *)VTABLE_get_pointer(INTERP, attrpmc);
        }

        if (rr)
            RETURN(INTVAL 1);

        RETURN(INTVAL 0);
    }

/*

=item C<METHOD read(INTVAL length)>

Read C<length> bytes from the handle.

=cut

*/

    METHOD read(INTVAL length) {
        INTVAL flags, bytes, offset;
        STRING *attrname, *str;
        PMC *attrpmc, *r;
        request_rec *rr = NULL;
        char *buf;

        GET_ATTR_r(INTERP, SELF, r);
        if (!r)
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,
                "Cannot read from a closed filehandle");

        attrname = Parrot_str_new_constant(INTERP, "r");
        attrpmc = VTABLE_get_attr_str(INTERP, r, attrname);
        rr = (request_rec *)VTABLE_get_pointer(INTERP, attrpmc);

        GET_ATTR_flags(INTERP, SELF, flags);
        if (!(flags & PIO_F_READ))
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,
                "Cannot read from a filehandle not opened for read");

        buf = (char *)mem_sys_allocate(length);
        bytes = modparrot_request_read(rr, buf, length);

        if (bytes) {
            GET_ATTR_read_offset(INTERP, SELF, offset);
            SET_ATTR_read_offset(INTERP, SELF, offset + bytes);
            str = Parrot_str_new(INTERP, buf, bytes);
        }
        else {
            /* XXX should be a null string */
            str = string_from_literal(INTERP, "");
        }

        mem_sys_free(buf);

        RETURN(STRING *str);
    }

/*

=item C<METHOD readline()>

TODO

=cut

*/

/* readline code here */

/*

=item <METHOD readall(STRING *ignored)>

XXX

=cut

*/

    METHOD readall(STRING *ignored) {
        PMC *rpmc, *attrpmc;
        STRING *result, *attrname;
        request_rec *r;
        apr_table_t *headers;
        const char *buf;
        int length, nread, total;

        if (Parrot_io_is_closed_filehandle(INTERP, SELF)) {
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,
                "Cannot readall without a request_rec object or open handle");
        }

        GET_ATTR_r(INTERP, SELF, rpmc);
        if (!rpmc)
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,
                "Cannot read from a closed filehandle");
        attrname = Parrot_str_new_constant(INTERP, "r");
        attrpmc = VTABLE_get_attr_str(INTERP, rpmc, attrname);
        r = (request_rec *)VTABLE_get_pointer(INTERP, attrpmc);

        result = Parrot_str_new_noinit(INTERP, enum_stringrep_one, 0);
        headers = r->headers_in;
        buf = apr_table_get(headers, "Content-Length");
        if (!buf) {
            RETURN (STRING *result);
        }
        length = atoi(buf);
        if (!length) {
            RETURN (STRING *result);
        }
        do {
            STRING * const part =
                Parrot_io_reads(INTERP, SELF, MODPARROTHANDLE_READ_SIZE);
            /* XXX is this reliably in bytes??? */
            nread = Parrot_str_byte_length(INTERP, part);
            if (nread) {
                result = Parrot_str_append(INTERP, result, part);
            }
            else {
                /* prevent infinite loops.  this should never happen */
                break;
            }
            total += nread;
        } while (total < length);

        RETURN(STRING *result);
    }

/*

=item C<METHOD flush()>

This is a no-op for now.

=cut

*/

    METHOD flush() {
        RETURN();
    }

/*

=item C<METHOD print([INTVAL|FLOATVAL|STRING *|PMC*] value)>

Print the passed in integer, number, string, or PMC to the handle.
(Integers, numbers, and strings are auto-boxed as PMCs.)

=cut

*/

    METHOD print(PMC *to_print) {
        STRING *string_to_print = VTABLE_get_string(INTERP, to_print);
        Parrot_io_putps(interp, SELF, string_to_print);
    }

/*

=item C<METHOD puts(STRING *value)>

Print the string to the handle.

=cut

*/

    METHOD puts(STRING *to_print) {
        INTVAL flags, status;
        STRING *attrname;
        PMC *attrpmc, *r;
        request_rec *rr = NULL;
        char *str;

        GET_ATTR_r(INTERP, SELF, r);
        if (!r)
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,
                "Cannot write to a closed filehandle");

        attrname = Parrot_str_new_constant(INTERP, "r");
        attrpmc = VTABLE_get_attr_str(INTERP, r, attrname);
        rr = (request_rec *)VTABLE_get_pointer(INTERP, attrpmc);

        GET_ATTR_flags(INTERP, SELF, flags);
        if (!(flags & PIO_F_WRITE))
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,
                "Cannot write to a filehandle not opened for write");

        str = string_to_cstring_nullable(INTERP, to_print);
        status = ap_rputs(str, rr);
        Parrot_str_free_cstring(str);

        RETURN(INTVAL status);
    }

/*

=item C<METHOD buffer_type(STRING *new_type :optional)>

Set or retrieve the buffering attribute for the handle. This attribute is
ignored, but stored for mocking.

=cut

*/

    METHOD buffer_type(STRING *new_type :optional, INTVAL got_type :opt_flag) {
        INTVAL flags;
        STRING *nobuffer_string   = Parrot_str_new_constant(INTERP, "unbuffered");
        STRING *linebuffer_string = Parrot_str_new_constant(INTERP, "line-buffered");
        STRING *fullbuffer_string = Parrot_str_new_constant(INTERP, "full-buffered");

        GET_ATTR_flags(INTERP, SELF, flags);

        if (got_type) {
            if (Parrot_str_equal(INTERP, new_type, nobuffer_string)) {
                flags &= ~ PIO_F_LINEBUF;
                flags &= ~ PIO_F_BLKBUF;
            }
            else if (Parrot_str_equal(INTERP, new_type, linebuffer_string)) {
                flags |=   PIO_F_LINEBUF;
                flags &= ~ PIO_F_BLKBUF;
            }
            else if (Parrot_str_equal(INTERP, new_type, fullbuffer_string)) {
                flags &= ~ PIO_F_LINEBUF;
                flags |=   PIO_F_BLKBUF;
            }

            SET_ATTR_flags(INTERP, SELF, flags);
        }

        if (flags & PIO_F_LINEBUF)
            RETURN(STRING *linebuffer_string);
        else if (flags & PIO_F_BLKBUF)
            RETURN(STRING *fullbuffer_string);
        RETURN(STRING *nobuffer_string);
    }

/*

=item C<METHOD buffer_size(INTVAL new_size :optional)>

Always returns 0 for ModParrotHandle.

=cut

*/

    METHOD buffer_size(INTVAL new_size :optional, INTVAL got_size :opt_flag) {
        RETURN(INTVAL 0);

    }

/*

=item C<METHOD mode()>

Retrieve the read mode string for the handle.

=cut

*/

    METHOD mode() {
        STRING *mode, *mode_copy;

        GET_ATTR_mode(INTERP, SELF, mode);
        mode_copy = Parrot_str_copy(INTERP, mode);

        RETURN(STRING *mode_copy);

    }

/*

=item C<METHOD encoding(STRING *new_encoding)>

Set or retrieve the encoding attribute (a string name of the selected encoding
scheme) for the handle.

=cut

*/

    METHOD encoding(STRING *new_encoding :optional, INTVAL got_encoding :opt_flag) {
        STRING *encoding;
        STRING *encoding_copy = NULL;

        if (got_encoding) {
            if (!STRING_IS_NULL(new_encoding))
                encoding_copy = Parrot_str_copy(INTERP, new_encoding);
            SET_ATTR_encoding(INTERP, SELF, encoding_copy);
            RETURN(STRING *new_encoding);
        }

        GET_ATTR_encoding(INTERP, SELF, encoding);
        if (!STRING_IS_NULL(encoding))
            encoding_copy = Parrot_str_copy(INTERP, encoding);

        RETURN(STRING *encoding_copy);

    }

/*

=item C<METHOD eof()>

XXX TODO
Check if the handle is at end-of-file (if it has read to the end of
the string data).

=cut

*/

    METHOD eof() {
        RETURN(INTVAL 0);
    }


/*

=item C<METHOD get_fd()>

ModParrotHandles do not use integer file descriptors, so always returns an
error value.

=cut

*/

    METHOD get_fd() {
        RETURN(INTVAL -1);
    }


/*

=item C<METHOD setstdout(PMC *fh :optional)>

TEMPORARY method to set this filehandle as stdout.  Will be removed in favor
of a non-experimental setstdout or identical functionality in Parrot.

Sets the provided filehandle as stdout, or SELF if no arguments are provided.

=cut

*/

    METHOD setstdout(PMC *fh :optional, INTVAL got_fh :opt_flag) {
        _PIO_STDOUT(INTERP) = got_fh ? fh : SELF;
    }

/*

=item C<METHOD setstdin(PMC *fh :optional)>

TEMPORARY method to set a filehandle as stdin.  Will be removed in favor
of a non-experimental setstdin or identical functionality in Parrot.

Sets the provided filehandle as stdin, or SELF if no arguments are provided.

=cut

*/

    METHOD setstdin(PMC *fh :optional, INTVAL got_fh :opt_flag) {
         _PIO_STDIN(INTERP) = got_fh ? fh : SELF;
    }

/*

=back

=cut

*/

} /* end pmclass */

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
